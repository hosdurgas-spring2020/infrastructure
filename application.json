{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create Network",
  "Parameters": {
    "VpcCidr": {
      "Type": "String",
      "Description": "Enter IPv4 CIDR Block of VPC"
    },
    "SubnetCidr1": {
      "Type": "String"
    },
    "SubnetCidr2": {
      "Type": "String"
    },
    "SubnetCidr3": {
      "Type": "String"
    },
    "region": {
      "Type": "String"
    },
    "Name": {
      "Type": "String"
    },
    "Engine": {
      "Type": "String",
      "Default": "MySQL"
    },
    "DBIC": {
      "Type": "String",
      "Default": "db.t3.micro"
    },
    "DBII": {
      "Type": "String",
      "Default": "csye6225-spring2021"
    },
    "DBUsername": {
      "Type": "String",
      "Default": "shakti"
    },
    "DBPass": {
      "Type": "String",
      "Default": "Shakti123"
    },
    "DBName": {
      "Type": "String",
      "Default": "csye"
    },
    "RDSSize": {
      "Type": "String",
      "Default": "100"
    },
    "VolumeType": {
      "Type": "String",
      "Default": "gp2"
    },
    "VolumeSize": {
      "Type": "String",
      "Default": "20"
    },
    "EC2InstanceType": {
      "Type": "String",
      "Default": "t2.micro"
    },
    "ImageID": {
      "Type": "String",
      "Default": "ami-067fd4e9146ee24cc"
    },
    "KeyName": {
      "Type": "String"
    },
    "CDS3Bucket": {
      "Type": "String"
    },
    "HostedZone": {
      "Type": "String"
    },
    "DNSName": {
      "Type": "String"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": { "Ref": "VpcCidr" },
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [{ "Key": "Name", "Value": { "Ref": "Name" } }]
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [0, { "Fn::GetAZs": { "Ref": "region" } }]
        },
        "CidrBlock": { "Ref": "SubnetCidr1" },
        "VpcId": { "Ref": "VPC" }
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [1, { "Fn::GetAZs": { "Ref": "region" } }]
        },
        "CidrBlock": { "Ref": "SubnetCidr2" },
        "VpcId": { "Ref": "VPC" }
      }
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [2, { "Fn::GetAZs": { "Ref": "region" } }]
        },
        "CidrBlock": { "Ref": "SubnetCidr3" },
        "VpcId": { "Ref": "VPC" }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },
    "Subnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "SubnetId": { "Ref": "Subnet1" }
      }
    },

    "Subnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "SubnetId": { "Ref": "Subnet2" }
      }
    },

    "Subnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "SubnetId": { "Ref": "Subnet3" }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "InternetGateWayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": { "Ref": "InternetGateway" },
        "VpcId": { "Ref": "VPC" }
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "ApplicationSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "application",
        "GroupDescription": "SECURITY GROUP FOR EC2",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "ToPort": 22
          }
        ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "SGIngress80": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "FromPort": 80,
        "ToPort": 80,
        "GroupId": {
          "Fn::GetAtt": ["ApplicationSG", "GroupId"]
        }
      }
    },
    "SGIngress443": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "FromPort": 443,
        "ToPort": 443,
        "GroupId": {
          "Fn::GetAtt": ["ApplicationSG", "GroupId"]
        }
      }
    },
    "SGIngress5000": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "IpProtocol": "tcp",
        "FromPort": 5000,
        "ToPort": 5000,
        "GroupId": {
          "Fn::GetAtt": ["ApplicationSG", "GroupId"]
        }
      }
    },
    "DBSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "database",
        "GroupDescription": "SECURITY GROUP FOR DB",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": 3306,
            "ToPort": 3306
          }
        ],
        "VpcId": { "Ref": "VPC" }
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Description": "Role",
        "Path": "/",
        "RoleName": "EC2-CSYE6225"
      }
    },
    "WebAppS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "ThisActionDoesNotSupportResourceLevelPermissions",
              "Effect": "Allow",
              "Action": ["s3:ListAllMyBuckets"],
              "Resource": ["*"]
            },
            {
              "Sid": "TheseActionsSupportBucketLevelPermissions",
              "Effect": "Allow",
              "Action": ["s3:ListBucket*"],
              "Resource": [{ "Fn::GetAtt": ["S3Bucket", "Arn"] }]
            },
            {
              "Sid": "TheseActionsSupportObjectrLevelPermissions",
              "Effect": "Allow",
              "Action": [
                "s3:Get*",
                "s3:PutObject",
                "s3:ListMultipartUploadParts",
                "s3:Delete*"
              ],
              "Resource": [
                { "Fn::GetAtt": ["S3Bucket", "Arn"] },
                {
                  "Fn::Join": [
                    "",
                    [{ "Fn::GetAtt": ["S3Bucket", "Arn"] }, "/*"]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": ["ssm:GetParameters"],
              "Resource": "arn:aws:ssm:*:*:parameter/*"
            }
          ]
        },
        "PolicyName": "WebAppS3",
        "Roles": [{ "Ref": "EC2Role" }, { "Ref": "CodeDeployEC2ServiceRole" }]
      }
    },
    "ListS3BucketsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },

    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "StandardRule",
              "Status": "Enabled",
              "ExpirationInDays": "365",
              "Transitions": [
                {
                  "TransitionInDays": "30",
                  "StorageClass": "STANDARD_IA"
                }
              ]
            }
          ]
        }
      }
    },
    "RDS": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": { "Ref": "RDSSize" },
        "Engine": { "Ref": "Engine" },
        "DBInstanceClass": { "Ref": "DBIC" },
        "DBInstanceIdentifier": { "Ref": "DBII" },
        "MultiAZ": false,
        "MasterUsername": { "Ref": "DBUsername" },
        "MasterUserPassword": { "Ref": "DBPass" },
        "DBSubnetGroupName": { "Ref": "RDSSubnetGroup" },
        "PubliclyAccessible": false,
        "DBName": { "Ref": "DBName" },
        "VPCSecurityGroups": [{ "Fn::GetAtt": ["DBSG", "GroupId"] }]
      }
    },
    "RDSSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "RDS Subnet group",
        "DBSubnetGroupName": "RDSSubnet1",
        "SubnetIds": [{ "Ref": "Subnet1" }, { "Ref": "Subnet2" }]
      }
    },
    "RDSParam1": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "DBHost",
        "Type": "String",
        "Value": { "Fn::GetAtt": ["RDS", "Endpoint.Address"] },
        "Description": "EndpointAddress"
      }
    },
    "RDSParam2": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "DBUsername",
        "Type": "String",
        "Value": { "Ref": "DBUsername" },
        "Description": "Username"
      }
    },
    "RDSParam3": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "DBPass",
        "Type": "String",
        "Value": { "Ref": "DBPass" },
        "Description": "Passwords"
      }
    },
    "S3BucketParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "S3BucketName",
        "Type": "String",
        "Value": { "Ref": "S3Bucket" },
        "Description": "SSM Parameter of type S3Bucket"
      }
    },

    "CodeDeployEC2S3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": ["s3:Get*", "s3:List*"],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "CDS3Bucket" }]]
                },
                {
                  "Fn::Join": [
                    "",
                    ["arn:aws:s3:::", { "Ref": "CDS3Bucket" }, "/*"]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CodeDeploy-EC2-S3",
        "Roles": [{ "Ref": "CodeDeployEC2ServiceRole" }],
        "Users": ["circleci"]
      }
    },

    "CircleCIUploadToS3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:PutObject", "s3:Get*", "s3:List*"],
              "Resource": [
                {
                  "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "CDS3Bucket" }]]
                },
                {
                  "Fn::Join": [
                    "",
                    ["arn:aws:s3:::", { "Ref": "CDS3Bucket" }, "/*"]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CircleCI-Upload-To-S3",

        "Users": ["circleci"]
      }
    },
    "CircleCICodeDeploy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":application:csye6225-webapp"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": ["*"]
            },
            {
              "Effect": "Allow",
              "Action": ["codedeploy:GetDeploymentConfig"],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":deploymentconfig:CodeDeployDefault.OneAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "region" },
                      ":",
                      { "Ref": "AWS::AccountId" },
                      ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "PolicyName": "CircleCI-Code-Deploy",
        "Users": ["circleci"]
      }
    },
    "CodeDeployEC2ServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/",
        "RoleName": "CodeDeployEC2ServiceRole",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole",
          "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        ]
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "codedeploy.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "RoleName": "CodeDeployServiceRole",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ]
      }
    },
    "CodeDeployServiceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "CodeDeployEC2ServiceRole"
          }
        ]
      }
    },

    "CodeDeploy": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": "csye6225-webapp",
        "ComputePlatform": "Server"
      }
    },
    "CodeDeployGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "AutoScalingGroups": [{ "Ref": "WebServerGroup" }],
        "ApplicationName": { "Ref": "CodeDeploy" },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "DeploymentGroupName": "csye6225-webapp-deployment",
        "DeploymentStyle": {
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
          "DeploymentType": "IN_PLACE"
        },
        "ServiceRoleArn": { "Fn::GetAtt": ["CodeDeployServiceRole", "Arn"] }
      }
    },
    "AutoScalingLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": {
          "Ref": "ListS3BucketsInstanceProfile"
        },
        "ImageId": { "Ref": "ImageID" },
        "InstanceType": { "Ref": "EC2InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "LaunchConfigurationName": "asg_launch_config",
        "SecurityGroups": [{ "Ref": "ApplicationSG" }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash -xe ",
                "sudo apt-get update",
                "sudo apt install mysql-client-core-5.7 -y",
                "sudo npm install pm2 -g",
                "sudo apt install unzip -y",
                "curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'",
                "unzip awscliv2.zip",
                "sudo ./aws/install",
                "mkdir -p env/properties",
                "touch env/properties/userdata.env",
                "echo USERNAME = $(aws ssm get-parameters --names DBUsername --query Parameters[0].Value) >> env/properties/userdata.env ",
                "echo PASSWORD = $(aws ssm get-parameters --names DBPass --query Parameters[0].Value) >> env/properties/userdata.env ",
                "echo HOST = $(aws ssm get-parameters --names DBHost --query Parameters[0].Value) >> env/properties/userdata.env ",
                "echo S3BUCKET = $(aws ssm get-parameters --names S3BucketName --query Parameters[0].Value) >> env/properties/userdata.env ",
                "echo SQSURL = $(aws ssm get-parameters --names SQSURL --query Parameters[0].Value) >> env/properties/userdata.env ",
                "echo SNSARN = $(aws ssm get-parameters --names SNSARN --query Parameters[0].Value) >> env/properties/userdata.env ",
                "echo DOMAIN = $(aws ssm get-parameters --names DOMAIN --query Parameters[0].Value) >> env/properties/userdata.env "
              ]
            ]
          }
        }
      },
      "DependsOn": "RDS"
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "WebappASG",
        "Cooldown": "60",
        "DesiredCapacity": "2",
        "LaunchConfigurationName": { "Ref": "AutoScalingLaunchConfig" },
        "MaxSize": "5",
        "MinSize": "2",
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "TargetGroupARNs": [{ "Ref": "TargetGroup" }],
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "CodeDeployASG"
          }
        ],
        "VPCZoneIdentifier": [
          { "Ref": "Subnet1" },
          { "Ref": "Subnet2" },
          { "Ref": "Subnet3" }
        ]
      },
      "DependsOn": ["InternetGateWayAttachment", "LoadBalancer"]
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 5% for 1 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "5",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 3% for 1 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "60",
        "EvaluationPeriods": "1",
        "Threshold": "3",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "WebAppTG",
        "Port": 5000,
        "Protocol": "HTTP",
        "VpcId": { "Ref": "VPC" }
      }
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "WebAppLoadBalencer",
        "SecurityGroups": [{ "Ref": "ApplicationSG" }],
        "Subnets": [
          { "Ref": "Subnet1" },
          { "Ref": "Subnet2" },
          { "Ref": "Subnet3" }
        ],
        "Type": "application"
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "LoadBalancerArn": { "Ref": "LoadBalancer" },
        "Port": 80,
        "Protocol": "HTTP",
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "TargetGroup" }
          }
        ]
      }
    },
    "Route53Record": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneId": { "Ref": "HostedZone" },
        "RecordSets": [
          {
            "Name": { "Ref": "DNSName" },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": ["LoadBalancer", "CanonicalHostedZoneID"]
              },
              "DNSName": { "Fn::GetAtt": ["LoadBalancer", "DNSName"] }
            }
          }
        ]
      }
    },
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "SNSWebapp",
        "Subscription": [
          {
            "Endpoint": { "Fn::GetAtt": ["LambdaFuntion", "Arn"] },
            "Protocol": "lambda"
          }
        ]
      }
    },
    "NetworkInterfavePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface"
              ],
              "Resource": "*"
            }
          ]
        },
        "PolicyName": "NetworkPolicy",
        "Roles": [{ "Ref": "AWSLambdaRole4" }]
      }
    },

    "AWSLambdaRole4": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Description": "Role",
        "Path": "/",
        "RoleName": "AWSLambdaRole4",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
          "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        ]
      }
    },
    "SQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MaximumMessageSize": 262144,
        "MessageRetentionPeriod": 3600,
        "QueueName": "webappque",
        "ReceiveMessageWaitTimeSeconds": 20
      }
    },
    "LambdaFuntion": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var aws = require('aws-sdk');",
                "var ses = new aws.SES({region: 'us-east-1'});",
                "var dynamodb = new aws.DynamoDB();",
                "exports.handler = (event, context, callback) => {",
                "var message = event.Records[0].Sns;",
                "console.log(message)",
                "const dbparams = {",
                "ConditionExpression: 'attribute_not_exists(id)',",
                "TableName: 'demo',",
                "Item: {",
                "id: {",
                "S: message.Subject ,",
                "},",
                "Name: {",
                "S: 'RequestToken',",
                " },",
                "TTL: {",
                "N:(Math.floor(Date.now() / 1000) + 3600).toString(),",
                "},",
                "},",
                "};",
                "dynamodb.putItem(dbparams, function(err, data) {",
                "if (err) {",
                "if (err.code == 'ConditionalCheckFailedException') {",
                "console.log('Exists')",
                "context.succeed(event);",
                "} else console.log(err);",
                "} else {",
                "var params = {",
                " Destination: {",
                "ToAddresses: [message.Subject]",
                "},",
                "Message: {",
                "Body: {",
                "Text: { Data: message.Message",
                "}",
                "},",
                "Subject: { Data: 'YOUR BILLS ARE DUE'",
                "}",
                "},",
                {
                  "Fn::Sub": [
                    "Source: 'billservices@${DNSName}'",
                    { "DNSName": { "Ref": "DNSName" } }
                  ]
                },
                "};",
                "ses.sendEmail(params, function (err, data) {",
                "callback(null, {err: err, data: data});",
                "if (err) {",
                "console.log(err);",
                "context.fail(err);",
                "} else {",
                "console.log(data);",
                "context.succeed(event);",
                "}",
                "});",
                "}",
                "});",
                "}"
              ]
            ]
          }
        },
        "Description": "Lambda Function to send emails",
        "Environment": {
          "Variables": { "SenderEmail": "shakti@dev.shaktichetan.me" }
        },
        "FunctionName": "WebappEmailSender1",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["AWSLambdaRole4", "Arn"] },
        "Runtime": "nodejs12.x"
      }
    },
    "LambdaResourcePolicy": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFuntion" },
        "Principal": "sns.amazonaws.com",
        "Action": "lambda:InvokeFunction",
        "SourceArn": { "Ref": "SNSTopic" }
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "demo",
        "TimeToLiveSpecification": {
          "AttributeName": "TTL",
          "Enabled": true
        }
      }
    },

    "SQSParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "SQSURL",
        "Type": "String",
        "Value": { "Ref": "SQS" },
        "Description": "URL OF SQS"
      }
    },
    "SNSParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "SNSARN",
        "Type": "String",
        "Value": { "Ref": "SNSTopic" },
        "Description": "SSM Parameter of type SNS"
      }
    },
    "DomainName": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "DOMAIN",
        "Type": "String",
        "Value": { "Ref": "DNSName" },
        "Description": "SSM Parameter of type S3Bucket"
      }
    }
  }
}
